Computational finance relies on numerical analysis. While numerical methods in
finance are often sucseptible to efficient, parallel implementations, the
accuracy of numerical results remains hard to guarantee. Popular programming
environments offer few tools for the analysis of cumulative error, or guidance
on how to keep the resulting error low.

In this short seminar, I will present some examples of how some simple
numerical methods gone astray, and present 4 possible approaches to solving the
problem:

1. Change the way we write numerical software, e.g., encourage the use of
inherently more accurate numerical combinators.

2. Change the underlying numerical data types, e.g., expand upon the work with
unums.

3. Change the underlying runtime of high-performance numerical software, e.g.,
using lazy arithemtic, causing recomputations with higher precisision when the
resulting accuracy turns out insufficient.

4. Improve existing programming environments to better guide the development of
accurate numerical software, e.g., using implicit compiler techniques, such as,
dependent types.
