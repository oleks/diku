#+TITLE: MPFR

[[http://www.mpfr.org/][GNU MPFR]] is a Multiple-Preicicion Floating-point
library that implements correct Rounding[1]. It is sometimes also called
Multiple-Precision Floating-point Reliable[2]. GNU MPFR is licenser under LGPL.

MPFR implements correct rounding in the sense that the result of an MPFR
operation is rounded to fit the precision, and according to the rounding mode
of the target variable. A major inhibit to the usability of MPFR is the need to
explicitly choose a precision and rounding mode for the target variable.

This choice is not always intuitive, and choosing higher precision, or a
different rounding mode, does not necessarily lead to more accurate
results[3,4]. Furthermore, the accuracy of the final result is not equally
sensitive to the precision, or rounding mode, of the individual operations[4].

[1] L. Fousse, G. Hanrot, V. Lefèvre, P. Pélissier, and P. Zimmermann. MPFR: A
multiple-precision binary floating-point library with correct rounding. ACM
Trans. Math. Softw. 33, 2, Article 13, 2007.

[2] M. Mächler. Arbitrarily Accurate Computation with R: The Rmpfr
Package. 2015. Available via CRAN:
https://cran.r-project.org/web/packages/Rmpfr/vignettes/Rmpfr-pkg.pdf.

[3] A. Cuyt, B. Verdonk, S. Becuwe, and P. Kuterna. A Remarkable Example of
Catastrophic Cancellation Unraveled. Computing 66(3): 309–320, 2001.

[4] H. Kawabata, H. Iwasaki, and P. Thiemann. Improving Floating-Point Numbers:
A Lazy Approach to Adaptive Accuracy Refinement for Numerical Computations.
Programming Languages and Systems: 25th European Symposium on Programming,
ESOP, 390-418. Springer, 2016.

** What is this?

This is a minimal [[https://www.docker.com/][Docker]] image with MPFR support,
and some MPFR programs under [[src][src]].

To run the programs, provied you already have a Docker daemon running, do this:

#+BEGIN_SRC
you@yourmachine $ make interact
# Docker magic happens here..
franko@docker:~ $ make
#+END_SRC

This will drop you into a shell with the =.c= programs from [[src][src]]
compiled as binaries ending in =.bin=.

** Language Support

  * [[https://www.r-project.org/about.html][R]] has support for MPFR via the
    [[https://cran.r-project.org/web/packages/Rmpfr/index.html][Rmpfr]]
    package. The precision and rounding mode can be specified when creating an
    MPFR number object.

  * [[https://www.haskell.org/][Haskell]] boasts support for MPFR via the
    [[https://hackage.haskell.org/package/hmpfr][hmpfr]] package on
    [[https://hackage.haskell.org/][Hackage]].

  * [[http://julialang.org/][Julia]]
    [[http://docs.julialang.org/en/release-0.4/manual/integers-and-floating-point-numbers/#arbitrary-precision-arithmetic][wraps
    MPFR]] in a data-type =BigFloat=. The default precision and rounding mode for a
    =BigFloat= can be specified globally, or locally for a block of code.

  * You can also try out MPFR
    [[http://ex-cs.sist.ac.jp/~tkouya/try_mpfr.html][online]], without
    installing it first. This is not a JavaScript implementation, but a CGI
    script. Some people have tried compiling 32-bit GMP+MPFR to JavaScript
    using [[https://github.com/kripken/emscripten][Emscripten]].
